*treemonkey.txt*    Label-based motions on treesitter nodes.
*treemonkey.nvim*

Author: atusy
License: MIT <https://github.com/atusy/treemonkey.nvim/blob/main/LICENSE>

See https://github.com/atusy/treemonkey.nvim/ for animated examples.


==============================================================================
CONTENTS                                                 *treemonkey-contents*

SETUP                     |treemonkey-setup|
MODULES AND FUNCTIONS     |treemonkey-modules-and-functions|
  treemonkey              |treemonkey|
  treemonkey.get()        |treemonkey.get()|
  treemonkey.select()     |treemonkey.select()|
TYPE DEFINITIONS          |treemonkey-type-definitions|
  TreemonkeyItem          |TreemonkeyItem|
  TreemonkeyOpts          |TreemonkeyOpts|
EXAMPLES                  |treemonkey-examples|
  Select a node           |treemonkey-example-select-node|
  Fold a node             |treemonkey-example-fold-node|


==============================================================================
SETUP                                                       *treemonkey-setup*

With |lazy.nvim.txt| from https://github.com/folke/lazy.nvim/ , users can
easily setup a mapping to select a region of a node using label-hints. The
choice comes from a node on the cursor and its parent nodes.

>lua
  require("lazy").setup({
    {
      "https://github.com/atusy/treemonkey.nvim",
      deps = { "https://github.com/nvim-treesitter/nvim-treesitter" }
      init = function()
        vim.keymap.set({ "x", "o" }, "m", function()
          require("treemonkey").select({ ignore_injections = false })
        end)
      end,
    },
  }, {})
<


==============================================================================
MODULES AND FUNCTIONS                       *treemonkey-modules-and-functions*


------------------------------------------------------------------------------
*treemonkey*

*treemonkey.get()*

Get a chosen node. See |TreemonkeyOpts| and |TreemonkeyItem| for type
definitions of the parameter and the retrun.

>lua
  ---@type fun(opts: TreemonkeyOpts): TreemonkeyItem
  require("treemonkey").get
<

*treemonkey.select()*

Select a range of the chosen node in |Visual-mode| or |Operator-pending-mode|.
See |TreemonkeyOpts| for the type definition of the parameter.

>lua
  require("treemonkey").select  ---@type fun(opts: TreemonkeyOpts): nil
<


==============================================================================
TYPE DEFINITIONS                                 *treemonkey-type-definitions*


------------------------------------------------------------------------------
*TreemonkeyItem*

Retrun value of the |treemonkey.get()|.

>lua
  ---@class TreemonkeyItem
  ---@field row integer
  ---@field col integer
  ---@field label string
  ---@field node TSNode
<

------------------------------------------------------------------------------
*TreemonkeyOpts*

Options to be passed to |treemonkey.get()| or |treemonkey.select()|.

>lua
  ---@class TreemonkeyOpts
  ---  A table of options 
  ---@field filter? fun(nodes: TSNode[]): TSNode[]
  ---  A function to fileter candidate nodes
  ---@field highlight TreemonkeyOpts.highlight
  ---@field ignore_injections? boolean
  ---  Whether or not (default) to ignore injected language
  ---@field include_root? boolean
  ---  Whether or not (default) to include the root node in a choice
  ---@field labels string[]
  ---  A list of labels for selecting nodes. Defaults to a-z
  ---@field experimental { treesitter_context: boolean }
  ---  Options for experimental features

  ---@class TreemonkeyOpts.highlight Highlight groups
  ---@field first_node string?
  ---  A highlight group for the labels of the first selection until the
  ---  second selection is done. If `nil` (default) applies no highlight.
  ---  Setting this to "Visual" might be helpful when trying to select a
  ---  range in charwise.
  ---@field label string A highlight group for the labels
<


==============================================================================
EXAMPLES                                                 *treemonkey-examples*


------------------------------------------------------------------------------
                                                   *treemonkey-example-select*
Select a node in |Visual-mode| or |Operator-pending-mode|.

>lua
  vim.keymap.set({ "x", "o" }, "m", function()
    require("treemonkey").select({
      ignore_injections = false,
      experimental = { treesitter_context = true },
    })
  end)
<

------------------------------------------------------------------------------
                                                     *treemonkey-example-fold*
Fold a node when |'foldmethod'| is manual.

>lua
  vim.opt.foldmethod = "manual"

  -- Overwrite `zf` mapping to create fold on a selected node.
  vim.keymap.set("n", "zf", "zfV<Plug>(treemonkey-multiline)")
  vim.keymap.set("o", "<Plug>(treemonkey-multiline)", function()
    require("treemonkey").select({
      ignore_injections = false,
      -- reduce choice by a filter that only accepts multiline nodes
      filter = function(nodes)
        local res = {}
        for _, n in pairs(nodes) do
          local srow, _, erow, ecol = n:range()
          if erow > (srow + (ecol == 0 and 1 or 0)) then
            table.insert(res, n)
          end
        end
        return res
      end,
    })
  end)
<


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
